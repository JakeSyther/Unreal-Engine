FVector is a fundamental struct used to represent a three-dimensional vector.
It's commonly utilized for storing positions, directions, velocities, and scales in 3D space. 
The struct consists of three floating-point components: X, Y, and Z.

Here's a breakdown of the FVector struct:
struct FVector
{
    float X;
    float Y;
    float Z;
};

X, Y, Z: These components represent the vector's position or direction along the x, y, and z axes, respectively.
Here are some common use cases and examples of how FVector can be utilized:


Example 1: Position in 3D Space
FVector Position(10.0f, 20.0f, 30.0f); // Represents a position at (10, 20, 30)

Example 2: Direction in 3D Space
FVector Direction(0.0f, 0.0f, 1.0f); // Represents a direction pointing along the positive z-axis

Example 3: Velocity of an Object
FVector Velocity(5.0f, -2.0f, 0.0f); // Represents a velocity with components along the x and y axes

Example 4: Scale of an Object
FVector Scale(2.0f, 2.0f, 2.0f); // Represents a scaling factor to apply to an object uniformly along all axes

Example 5: Arithmetic Operations on FVector
FVector A(1.0f, 2.0f, 3.0f);
FVector B(4.0f, 5.0f, 6.0f);

FVector Result = A + B; // Component-wise addition
// Result.X = 1.0f + 4.0f = 5.0f
// Result.Y = 2.0f + 5.0f = 7.0f
// Result.Z = 3.0f + 6.0f = 9.0f

FVector Scaled = A * 2.0f; // Scalar multiplication
// Scaled.X = 1.0f * 2.0f = 2.0f
// Scaled.Y = 2.0f * 2.0f = 4.0f
// Scaled.Z = 3.0f * 2.0f = 6.0f

These examples demonstrate how FVector can be employed in Unreal Engine C++ to represent various types of three-dimensional data and perform basic arithmetic operations. 
It serves as a fundamental building block for many aspects of game development, including physics, rendering, and animation.





